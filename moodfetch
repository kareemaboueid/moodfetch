#!/usr/bin/env bash
# vim: noai:ts=4:sw=4:expandtab
# shellcheck source=/dev/null
# shellcheck disable=2009

# Resolve script directory:
# - If installed via `make install`, prefer /usr/local/share/moodfetch
# - Otherwise, fall back to local repo path
if [ -d "/usr/local/share/moodfetch" ]; then
  script_dir="/usr/local/share/moodfetch"
else
  script_dir="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd)"
fi

# Source our modules (quietly). Each module guards its own functions.
# Core modules
for f in "utils.sh" "logging.sh" "version.sh" "signals.sh"; do
  module_path="${script_dir}/core/${f}"
  if [ ! -f "$module_path" ]; then
    echo "Missing core module: ${f}. Please reinstall Moodfetch." >&2
    exit 1
  fi
  # shellcheck disable=SC1090
  . "$module_path"
done

# Configuration module
if [ ! -f "${script_dir}/config/config.sh" ]; then
  echo "Missing configuration module. Please reinstall Moodfetch." >&2
  exit 1
fi
# shellcheck disable=SC1090
. "${script_dir}/config/config.sh"

# Metrics and mood modules
for f in "templates.sh" "metrics.sh" "mood_engine.sh" "os_detect.sh"; do
  module_path="${script_dir}/metrics/${f}"
  if [ ! -f "$module_path" ]; then
    echo "Missing metrics module: ${f}. Please reinstall Moodfetch." >&2
    exit 1
  fi
  # shellcheck disable=SC1090
  . "$module_path"
done

# Initialize signal handlers early
init_signal_handlers

# Initialize configuration system
init_config

# --- Parse flags (simple getopt-style) ---
# Parse command line arguments
for arg in "$@"; do
  case "$arg" in
    --version)
      print_version
      exit 0
      ;;
    --check-update)
      check_for_updates
      exit 0
      exit 0
      ;;
    --debug)
      enable_debug
      shift
      ;;
    --help|-h)
      echo "Usage: moodfetch [options]"
      echo ""
      echo "Options:"
      echo "  --debug           Enable debug logging"
      echo "  --version         Show version and exit"
      echo "  --help, -h        Show this help and exit"
      echo ""
      echo "Tip: You can run 'bash -n *.sh' inside the repo to validate syntax quickly."
      exit 0
      ;;
  esac
done

# --- MAIN ---
main() {
  # Bold "Mood" header; if no ANSI, the raw text is still fine
  if $no_color; then
    echo "Mood"
  else
    echo -e "\e[1mMood\e[0m"
  fi
  echo ""

  # 1) Collect system metrics (best-effort & portable)
  collect_all_metrics

  # 2) Ask the engine to pick the most relevant mood.
  local final_mood
  final_mood="$(mood_engine_pick)"

  # Print the mood
  echo "${final_mood}"
}

# ------
# Entry point
main "$@"
